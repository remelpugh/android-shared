/*
 * Copyright (c) 2015 Remel Pugh
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


import groovy.swing.SwingBuilder

apply plugin: "maven"
apply plugin: "signing"

configurations {
    deployerJars
}

dependencies {
    deployerJars "org.apache.maven.wagon:wagon-ftp:2.2"
}

def osName
def repo_properties

osName = System.getProperty("os.name").toLowerCase();
repo_properties = "REPO.PROPERTIES." + ((osName.contains("windows")) ? "WIN" : "MAC")

if (!project.hasProperty(repo_properties) || !new File(project.property(repo_properties).toString()).exists()) {
    throw new GradleException("Unable to locate gradle properties file.")
}

def repo_password
def repo_snapshot_url
def repo_url
def repo_username

Properties props = new Properties()
props.load(new FileInputStream(file(project.property(repo_properties))))

repo_password = props["REPO_PASSWORD"]
repo_snapshot_url = props["REPO_SNAPSHOT_URL"]
repo_url = props["REPO_URL"]
repo_username = props["REPO_USERNAME"]

def repositoryUrl

if (isReleaseBuild()) {
    repositoryUrl = repo_url
} else {
    repositoryUrl = repo_snapshot_url
}

afterEvaluate { project ->
    uploadArchives {
        if (repositoryUrl.length() > 0) {
            repositories {
                mavenDeployer {
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                    pom.artifactId = POM_ARTIFACT_ID

                    configuration = configurations.deployerJars

                    if (repo_password.length() == 0) {
                        if (System.console() == null) {
                            new SwingBuilder().edt {
                                dialog(modal: true, // Otherwise the build will continue running before you closed the dialog
                                        title: 'Enter password', // Dialog title
                                        alwaysOnTop: true, // pretty much what the name says
                                        resizable: false, // Don't allow the user to resize the dialog
                                        locationRelativeTo: null, // Place dialog in center of the screen
                                        pack: true, // We need to pack the dialog (so it will take the size of it's children)
                                        show: true // Let's show it
                                ) {
                                    vbox { // Put everything below each other
                                        label(text: "Please enter repository password:")
                                        input = passwordField()
                                        button(defaultButton: true, text: 'OK', actionPerformed: {
                                            //noinspection GrReassignedInClosureLocalVar
                                            repo_password = input.password;
                                            // Set pass variable to value of input field
                                            dispose(); // Close dialog
                                        })
                                    } // vbox end
                                } // dialog end
                            } // edt end
                        } else {
                            //noinspection GrReassignedInClosureLocalVar
                            repo_password = System.console().readPassword("\nPlease enter repository password: ")
                            repo_password = new String(repo_password)
                        }
                    }

                    repository(url: repositoryUrl) {
                        authentication(userName: repo_username, password: repo_password)
                    }

                    pom.project {
                        name POM_NAME
                        packaging POM_PACKAGING
                        description POM_DESCRIPTION
                        url POM_URL

                        scm {
                            url POM_SCM_URL
                            connection POM_SCM_CONNECTION
                            developerConnection POM_SCM_DEV_CONNECTION
                        }

                        licenses {
                            license {
                                name POM_LICENCE_NAME
                                url POM_LICENCE_URL
                                distribution POM_LICENCE_DIST
                            }
                        }

                        developers {
                            developer {
                                id POM_DEVELOPER_ID
                                name POM_DEVELOPER_NAME
                            }
                        }
                    }
                }
            }
        } else {
            println "Repository url not specified"
        }
    }

//    signing {
//        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
//        sign configurations.archives
//    }
//
//    task androidSourcesJar(type: Jar) {
//        classifier = "sources"
//        from "src/main/java"
//    }

//    artifacts {
//        archives androidSourcesJar
//    }

    signing {
        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    task androidJavadocs(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }

    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
        classifier = 'javadoc'
        from androidJavadocs.destinationDir
    }

    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.sourceFiles
    }

    artifacts {
        archives androidSourcesJar
        //archives androidJavadocsJar
    }
}